#!/bin/bash

PROJECT=$1
SAMPLE_SHEET=$2
PREFIX=$3
NUMBER_OF_BED_FILES=$4
# GVCF_LIST=$5
if [[ $NUMBER_OF_BED_FILES -lt 100 ]]
	then
	NUMBER_OF_BED_FILES=100
fi

############# FIXED DIRECTORIES ################

SCRIPT_DIR="/isilon/sequencing/VITO/NEW_GIT_REPO/Mendel_Release_SetUp_Revamp/Scripts/"
JAVA_1_7="/isilon/sequencing/Kurt/Programs/Java/jdk1.7.0_25/bin"
CORE_PATH="/isilon/sequencing/Seq_Proj/"
GATK_DIR="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_3/GenomeAnalysisTK-3.3-0"
GATK_3_1_1_DIR="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_3/GenomeAnalysisTK-3.1-1"
GATK_DIR_NIGHTLY="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_3/GenomeAnalysisTK-nightly-2015-01-15-g92376d3"
SAMTOOLS_DIR="/isilon/sequencing/Kurt/Programs/samtools/samtools-0.1.18/"
TABIX_DIR="/isilon/sequencing/Kurt/Programs/TABIX/tabix-0.2.6/"
CIDR_SEQSUITE_JAVA_DIR="/isilon/sequencing/CIDRSeqSuiteSoftware/java/jre1.7.0_45/bin"
CIDR_SEQSUITE_6_1_1_DIR="/isilon/sequencing/CIDRSeqSuiteSoftware/RELEASES/6.1.1"
CIDR_SEQSUITE_4_0_JAVA='/isilon/sequencing/CIDRSeqSuiteSoftware/java/jre1.6.0_25/bin'
CIDR_SEQSUITE_DIR_4_0='/isilon/sequencing/CIDRSeqSuiteSoftware/Version_4_0'
############## FIXED FILE PATHS ################

KEY="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_2/lee.watkins_jhmi.edu.key"
HAPMAP_VCF="/isilon/sequencing/GATK_resource_bundle/2.5/b37/hapmap_3.3.b37.vcf"
OMNI_VCF="/isilon/sequencing/GATK_resource_bundle/2.5/b37/1000G_omni2.5.b37.vcf"
ONEKG_SNPS_VCF="/isilon/sequencing/GATK_resource_bundle/2.5/b37/1000G_phase1.snps.high_confidence.b37.vcf"
DBSNP_138_VCF="/isilon/sequencing/GATK_resource_bundle/2.8/b37/dbsnp_138.b37.vcf"
ONEKG_INDELS_VCF="/isilon/sequencing/GATK_resource_bundle/2.2/b37/Mills_and_1000G_gold_standard.indels.b37.vcf"
P3_1KG="/isilon/sequencing/1000genomes/Full_Project/Sep_2014/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5.20130502.sites.vcf.gz"
ExAC="/isilon/sequencing/ExAC/Release_0.3/ExAC.r0.3.sites.vep.vcf.gz"
KNOWN_SNPS="/isilon/sequencing/GATK_resource_bundle/2.8/b37/dbsnp_138.b37.excluding_sites_after_129.vcf"
VERACODE_CSV="/isilon/sequencing/CIDRSeqSuiteSoftware/resources/Veracode_hg18_hg19.csv"
MERGED_MENDEL_BED_FILE="/isilon/sequencing/Seq_Proj/M_Valle_MendelianDisorders_SeqWholeExome_120511_GATK_3_3-0/BED_Files/BAITS_Merged_S03723314_S06588914.bed"
# MERGED_MENDEL_BED_FILE="/isilon/sequencing/VITO/temp/one_off_mendel_merged_sorted_and_formatted_ALLMERGED.bed" #Used for the unsolved samples
############################################################################
################# Start of Combine Gvcf Functions ##########################
############################################################################

mkdir -p $CORE_PATH/$PROJECT/LOGS
mkdir -p $CORE_PATH/$PROJECT/MULTI_SAMPLE/VARIANT_SUMMARY_STAT_VCF/


CREATE_PROJECT_INFO_ARRAY (){
PROJECT_INFO_ARRAY=(`sed 's/\r//g' $SAMPLE_SHEET | sed 's/,/\t/g' | awk 'NR>1 {print $12,$18}' | sort | uniq`)

REF_GENOME=${PROJECT_INFO_ARRAY[0]}
PROJECT_DBSNP=${PROJECT_INFO_ARRAY[1]}
}

CREATE_GVCF_LIST(){
OLD_GVCF_LIST=$(ls -tr $CORE_PATH/$PROJECT/*.samples.ReSeq.JH2027.list | tail -n1)
OLD_SAMPLE_COUNT=$(wc -l $OLD_GVCF_LIST | awk '{print $1}')
NEW_SAMPLE_COUNT=(`awk 'BEGIN{FS=","} NR>1{print $1,$8}' $SAMPLE_SHEET | sort | uniq | wc -l`)
# TOTAL_SAMPLES=(`expr $OLD_SAMPLE_COUNT + $NEW_SAMPLE_COUNT`)
TOTAL_SAMPLES=(`(cat $OLD_GVCF_LIST ; awk 'BEGIN{FS=","} NR>1{print $1,$8}' $SAMPLE_SHEET | sort | uniq | awk 'BEGIN{OFS="/"}{print "'$CORE_PATH'"$1,"GVCF",$2".genome.vcf"}') | sort | uniq | wc -l`)
(cat $OLD_GVCF_LIST ; awk 'BEGIN{FS=","} NR>1{print $1,$8}' $SAMPLE_SHEET | sort | uniq | awk 'BEGIN{OFS="/"}{print "'$CORE_PATH'"$1,"GVCF",$2".genome.vcf"}') | sort | uniq \
>| $CORE_PATH'/'$PROJECT'/'$TOTAL_SAMPLES'.samples.ReSeq.JH2027.list'
GVCF_LIST=(`echo $CORE_PATH'/'$PROJECT'/'$TOTAL_SAMPLES'.samples.ReSeq.JH2027.list'`)
}

FORMAT_AND_SCATTER_BAIT_BED() {
BED_FILE_PREFIX=(`echo SPLITTED_BED_FILE_`)

awk 1 $MERGED_MENDEL_BED_FILE | sed -r 's/\r//g ; s/chr//g ; s/[[:space:]]+/\t/g' >| $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed
(awk '$1~/^[0-9]/' $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed | sort -k1,1n -k2,2n ; \
awk '$1=="X"' $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed | sort -k 2,2n ; \
awk '$1=="Y"' $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed | sort -k 2,2n ; \
awk '$1=="MT"' $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed | sort -k 2,2n) \
>| $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_AND_SORTED_BED_FILE.bed

INTERVALS_DIVIDED=`wc -l $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_AND_SORTED_BED_FILE.bed | awk '{print $1"/""'$NUMBER_OF_BED_FILES'"}' | bc | awk '{print $0+1}'`

split -l $INTERVALS_DIVIDED -a 4 -d  $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_AND_SORTED_BED_FILE.bed $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/$BED_FILE_PREFIX

ls $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/$BED_FILE_PREFIX* | awk '{print "mv",$0,$0".bed"}' | bash
}

COMBINE_GVCF(){
echo \
 qsub \
 -N 'A01_COMBINE_GVCF_'$PROJECT'_'$BED_FILE_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_A01_COMBINE_GVCF_'$BED_FILE_NAME.log \
 $SCRIPT_DIR/A01_COMBINE_GVCF.sh \
 $JAVA_1_7 $GATK_DIR $REF_GENOME \
 $KEY $CORE_PATH $PROJECT $GVCF_LIST \
 $PREFIX $BED_FILE_NAME
 }

############ START OF THE NEW GVCF SPLIT#####################

# COMBINE_GVCF_FOR_MINI_GVCF(){
# echo \
#  qsub \
#  -N 'A01_COMBINE_GVCF_'$PROJECT'_'$BED_FILE_NAME'_'$MINI_GVCF_LIST \
#  -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_A01_COMBINE_GVCF_'$BED_FILE_NAME'_'$MINI_GVCF_LIST.log \
#  $SCRIPT_DIR/A01_COMBINE_GVCF.sh \
#  $JAVA_1_7 $GATK_DIR $REF_GENOME \
#  $KEY $CORE_PATH $PROJECT $MINI_GVCF_LIST \
#  $PREFIX $BED_FILE_NAME	
# }

# GENERATE_GENOTYPE_GVCF_HOLDID(){
# 	GENOTYPE_GVCF_HOLDID=$GENOTYPE_GVCF_HOLDID'A01_COMBINE_GVCF_'$PROJECT'_'$BED_FILE_NAME'_'$MINI_GVCF_LIST','
# }

# This will be similar to the combine variants command with this damn list
# GENOTYPE_GVCF(){
# 	MINI_GVCF_LIST_FILES=`ls $CORE_PATH/$PROJECT/TEMP/GVCF_LIST_SPLIT/SPLITTED_GVCF_LIST*`
# echo \
#  qsub \
#  -N B02_GENOTYPE_GVCF_$PROJECT'_'$BED_FILE_NAME \
#  -hold_jid $GENOTYPE_GVCF_HOLDID \
#  -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_B02_GENOTYPE_GVCF_'$BED_FILE_NAME.log \
#  $SCRIPT_DIR/B02_GENOTYPE_GVCF.sh \
#  $JAVA_1_7 $GATK_DIR $REF_GENOME \
#  $KEY $CORE_PATH $PROJECT \
#  $PREFIX $BED_FILE_NAME $MINI_GVCF_LIST_FILES
# }

############ END OF THE NEW GVCF SPLIT TO TEST #####################

GENOTYPE_GVCF(){
echo \
 qsub \
 -N B02_GENOTYPE_GVCF_$PROJECT'_'$BED_FILE_NAME \
 -hold_jid A01_COMBINE_GVCF_$PROJECT'_'$BED_FILE_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_B02_GENOTYPE_GVCF_'$BED_FILE_NAME.log \
 $SCRIPT_DIR/B02_GENOTYPE_GVCF.sh \
 $JAVA_1_7 $GATK_DIR $REF_GENOME \
 $KEY $CORE_PATH $PROJECT \
 $PREFIX $BED_FILE_NAME
}

VARIANT_ANNOTATOR(){
echo \
 qsub \
 -N C03_VARIANT_ANNOTATOR_$PROJECT'_'$BED_FILE_NAME \
 -hold_jid B02_GENOTYPE_GVCF_$PROJECT'_'$BED_FILE_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_C03_VARIANT_ANNOTATOR_'$BED_FILE_NAME.log \
 $SCRIPT_DIR/C03_VARIANT_ANNOTATOR.sh \
 $JAVA_1_7 $GATK_DIR $REF_GENOME \
 $KEY $CORE_PATH $PROJECT \
 $PREFIX $BED_FILE_NAME $PROJECT_DBSNP
}

##############################################################################
##################### End of Combine Gvcf Functions ##########################
##############################################################################

##############################################################################
################## Start of VQSR and Refinement Functions ####################
##############################################################################

GENERATE_COMBINE_VARIANTS_HOLD_ID(){
COMBINE_VARIANTS_HOLD_ID=$COMBINE_VARIANTS_HOLD_ID'C03_VARIANT_ANNOTATOR_'$PROJECT'_'$BED_FILE_NAME','
}

COMBINE_VARIANTS(){
echo \
 qsub \
 -N D04_COMBINE_VARIANTS_$PROJECT \
 -hold_jid $COMBINE_VARIANTS_HOLD_ID \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_D04_COMBINE_VARIANTS.log' \
 $SCRIPT_DIR/D04_COMBINE_VARIANTS.sh \
 $JAVA_1_7 $GATK_3_1_1_DIR $REF_GENOME $KEY \
 $CORE_PATH $PROJECT $PREFIX
}

VARIANT_RECALIBRATOR_SNV() {
echo \
 qsub \
 -N E05A_VARIANT_RECALIBRATOR_SNV_$PROJECT \
 -hold_jid D04_COMBINE_VARIANTS_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_E05A_VARIANT_RECALIBRATOR_SNV.log' \
 $SCRIPT_DIR/E05A_VARIANT_RECALIBRATOR_SNV.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME $HAPMAP_VCF $OMNI_VCF $ONEKG_SNPS_VCF $DBSNP_138_VCF \
 $CORE_PATH $PROJECT $PREFIX
}

VARIANT_RECALIBRATOR_INDEL() {
echo \
 qsub \
 -N E05B_VARIANT_RECALIBRATOR_INDEL_$PROJECT \
 -hold_jid D04_COMBINE_VARIANTS_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_E05B_VARIANT_RECALIBRATOR_INDEL.log' \
 $SCRIPT_DIR/E05B_VARIANT_RECALIBRATOR_INDEL.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME $ONEKG_INDELS_VCF \
 $CORE_PATH $PROJECT $PREFIX
}

APPLY_RECALIBRATION_SNV(){
echo \
 qsub \
 -N F06_APPLY_RECALIBRATION_SNV_$PROJECT \
 -hold_jid E05A_VARIANT_RECALIBRATOR_SNV_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_F06_APPLY_RECALIBRATION_SNV.log' \
 $SCRIPT_DIR/F06_APPLY_RECALIBRATION_SNV.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
 $CORE_PATH $PROJECT $PREFIX
}

APPLY_RECALIBRATION_INDEL(){
echo \
 qsub \
 -N G07_APPLY_RECALIBRATION_INDEL_$PROJECT \
 -hold_jid F06_APPLY_RECALIBRATION_SNV_$PROJECT','E05B_VARIANT_RECALIBRATOR_INDEL_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_G07_APPLY_RECALIBRATION_INDEL.log' \
 $SCRIPT_DIR/G07_APPLY_RECALIBRATION_INDEL.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
 $CORE_PATH $PROJECT $PREFIX
}

SELECT_RARE_BIALLELIC(){
echo \
 qsub \
 -N H08A_SELECT_RARE_BIALLELIC_$PROJECT \
 -hold_jid G07_APPLY_RECALIBRATION_INDEL_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_H08A_SELECT_RARE_BIALLELIC.log' \
 $SCRIPT_DIR/H08A_SELECT_RARE_BIALLELIC.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
 $CORE_PATH $PROJECT $PREFIX
}

ANNOTATE_SELECT_RARE_BIALLELIC(){
echo \
 qsub \
 -N H08A-1_ANNOTATE_SELECT_RARE_BIALLELIC_$PROJECT \
 -hold_jid H08A_SELECT_RARE_BIALLELIC_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_H08A-1_ANNOTATE_SELECT_RARE_BIALLELIC.log' \
 $SCRIPT_DIR/H08A-1_ANNOTATE_SELECT_RARE_BIALLELIC.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
 $CORE_PATH $PROJECT $PREFIX
}

SELECT_COMMON_BIALLELIC(){
echo \
 qsub \
 -N H08B_SELECT_COMMON_BIALLELIC_$PROJECT \
 -hold_jid G07_APPLY_RECALIBRATION_INDEL_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_H08B_SELECT_COMMON_BIALLELIC.log' \
 $SCRIPT_DIR/H08B_SELECT_COMMON_BIALLELIC.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
 $CORE_PATH $PROJECT $PREFIX
}

SELECT_MULTIALLELIC(){
echo \
 qsub \
 -N H08C_SELECT_MULTIALLELIC_$PROJECT \
 -hold_jid G07_APPLY_RECALIBRATION_INDEL_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_H08C_SELECT_MULTIALLELIC.log' \
 $SCRIPT_DIR/H08C_SELECT_MULTIALLELIC.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
 $CORE_PATH $PROJECT $PREFIX
}

COMBINE_VARIANTS_VCF(){
echo \
 qsub \
 -N I09_COMBINE_VARIANTS_VCF_$PROJECT \
 -hold_jid H08C_SELECT_MULTIALLELIC_$PROJECT','H08B_SELECT_COMMON_BIALLELIC_$PROJECT','H08A-1_ANNOTATE_SELECT_RARE_BIALLELIC_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_I09_COMBINE_VARIANTS_VCF.log' \
 $SCRIPT_DIR/I09_COMBINE_VARIANTS_VCF.sh \
 $JAVA_1_7 $GATK_3_1_1_DIR $KEY $REF_GENOME \
 $CORE_PATH $PROJECT $PREFIX
}


BGZIP_AND_TABIX_COMBINED_VCF(){
echo \
 qsub \
 -N I09-1_BGZIP_AND_TABIX_COMBINED_VCF_$PROJECT \
 -hold_jid I09_COMBINE_VARIANTS_VCF_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_I09-1_BGZIP_AND_TABIX_COMBINED_VCF.log' \
 $SCRIPT_DIR/I09-1_BGZIP_AND_TABIX_COMBINED_VCF.sh \
 $TABIX_DIR \
 $CORE_PATH $PROJECT $PREFIX
}

############################################################################
################## End of VQSR and Refinement Functions ####################
############################################################################

############################################################################
################## Start of Vcf Splitter Functions #########################
############################################################################

CREATE_SAMPLE_INFO_ARRAY ()
{
SAMPLE_INFO_ARRAY=(`sed 's/\r//g' $SAMPLE_SHEET | awk 'BEGIN{FS=","} NR>1 {print $1,$8,$17,$15,$18,$12}' | sed 's/,/\t/g' | sort -k 2,2 | uniq | awk '$2=="'$SAMPLE'" {print $1,$2,$3,$4,$5,$6}'`)

PROJECT_SAMPLE=${SAMPLE_INFO_ARRAY[0]}
SM_TAG=${SAMPLE_INFO_ARRAY[1]}
TARGET_BED=${SAMPLE_INFO_ARRAY[2]}
TITV_BED=${SAMPLE_INFO_ARRAY[3]}
DBSNP=${SAMPLE_INFO_ARRAY[4]}
SAMPLE_REF_GENOME=${SAMPLE_INFO_ARRAY[5]}

JOB_ID_SM_TAG=$(echo $SM_TAG | sed 's/@/_/g')
}

SELECT_PASSING_VARIANTS_PER_SAMPLE(){
echo \
 qsub \
 -N J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -hold_jid I09_COMBINE_VARIANTS_VCF_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_J10A_SELECT_VARIANTS_FOR_SAMPLE.log' \
 $SCRIPT_DIR/J10A_SELECT_VARIANTS_FOR_SAMPLE.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME \
 $CORE_PATH $PROJECT $SM_TAG $PREFIX $PROJECT_SAMPLE
}

BGZIP_AND_TABIX_SAMPLE_VCF(){
echo \
 qsub \
 -N J10A-1_BGZIP_AND_TABIX_SAMPLE_VCF_$JOB_ID_SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_J10A-1_BGZIP_AND_TABIX_SAMPLE_VCF.log' \
 $SCRIPT_DIR/J10A-1_BGZIP_AND_TABIX_SAMPLE_VCF.sh \
 $TABIX_DIR \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG
}

SELECT_VARIANTS_ON_TARGET_BY_SAMPLE(){
echo \
 qsub \
 -N K11A_SELECT_VARIANTS_ON_TARGET_BY_SAMPLE_$JOB_ID_SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11A_SELECT_VARIANTS_ON_TARGET_BY_SAMPLE.log' \
 $SCRIPT_DIR/K11A_SELECT_VARIANTS_ON_TARGET_BY_SAMPLE.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG $TARGET_BED
}

SELECT_SNVS_ON_BAIT_BY_SAMPLE(){
echo \
 qsub \
 -N K11B_SELECT_SNVS_ON_BAIT_BY_SAMPLE_$JOB_ID_SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11B_SELECT_SNVS_ON_BAIT_BY_SAMPLE.log' \
 $SCRIPT_DIR/K11B_SELECT_SNVS_ON_BAIT_BY_SAMPLE.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG
}

SELECT_SNVS_ON_TARGET_BY_SAMPLE(){
echo \
 qsub \
 -N K11C_SELECT_SNVS_ON_TARGET_BY_SAMPLE_$JOB_ID_SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11C_SELECT_SNVS_ON_TARGET_BY_SAMPLE.log' \
 $SCRIPT_DIR/K11C_SELECT_SNVS_ON_TARGET_BY_SAMPLE.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG $TARGET_BED
}

CONCORDANCE_ON_TARGET_PER_SAMPLE(){
echo \
 qsub \
 -N K11C-1_CONCORDANCE_ON_TARGET_PER_SAMPLE_$JOB_ID_SM_TAG \
 -hold_jid K11C_SELECT_SNVS_ON_TARGET_BY_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11C-1_CONCORDANCE_ON_TARGET_PER_SAMPLE.log' \
 $SCRIPT_DIR/K11C-1_CONCORDANCE_ON_TARGET_PER_SAMPLE.sh \
 $CIDR_SEQSUITE_JAVA_DIR $CIDR_SEQSUITE_6_1_1_DIR $VERACODE_CSV \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG $TARGET_BED
}

SELECT_INDELS_ON_BAIT_BY_SAMPLE(){
echo \
 qsub \
 -N K11D_SELECT_INDELS_ON_BAIT_BY_SAMPLE_$JOB_ID_SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11D_SELECT_INDELS_ON_BAIT_BY_SAMPLE.log' \
 $SCRIPT_DIR/K11D_SELECT_INDELS_ON_BAIT_BY_SAMPLE.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG
}

SELECT_INDELS_ON_TARGET_BY_SAMPLE(){
echo \
 qsub \
 -N K11E_SELECT_INDELS_ON_TARGET_BY_SAMPLE_$JOB_ID_SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11E_SELECT_INDELS_ON_TARGET_BY_SAMPLE.log' \
 $SCRIPT_DIR/K11E_SELECT_INDELS_ON_TARGET_BY_SAMPLE.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG $TARGET_BED
}

SELECT_SNVS_TITV_ALL(){
echo \
 qsub \
 -N K11F_SELECT_SNVS_TITV_ALL_$JOB_ID_SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11F_SELECT_SNVS_TITV_ALL.log' \
 $SCRIPT_DIR/K11F_SELECT_SNVS_TITV_ALL.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG $TITV_BED
}

TITV_ALL(){
echo \
 qsub \
 -N K11F-1_TITV_ALL_$JOB_ID_SM_TAG \
 -hold_jid K11F_SELECT_SNVS_TITV_ALL_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11F-1_TITV_ALL.log' \
 $SCRIPT_DIR/K11F-1_TITV_ALL.sh \
 $SAMTOOLS_DIR \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG
}

SELECT_SNVS_TITV_KNOWN(){
echo \
 qsub \
 -N K11G_SELECT_SNVS_TITV_KNOWN_$JOB_ID_SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11G_SELECT_SNVS_TITV_KNOWN.log' \
 $SCRIPT_DIR/K11G_SELECT_SNVS_TITV_KNOWN.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME $KNOWN_SNPS \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG $TITV_BED
}

TITV_KNOWN(){
echo \
 qsub \
 -N K11G-1_TITV_KNOWN_$JOB_ID_SM_TAG \
 -hold_jid K11G_SELECT_SNVS_TITV_KNOWN_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11G-1_TITV_KNOWN.log' \
 $SCRIPT_DIR/K11G-1_TITV_KNOWN.sh \
 $SAMTOOLS_DIR \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG
}

SELECT_SNVS_TITV_NOVEL(){
echo \
 qsub \
 -N K11H_SELECT_SNVS_TITV_NOVEL_$JOB_ID_SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11H_SELECT_SNVS_TITV_NOVEL.log' \
 $SCRIPT_DIR/K11H_SELECT_SNVS_TITV_NOVEL.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME $KNOWN_SNPS \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG $TITV_BED
}

TITV_NOVEL(){
echo \
 qsub \
 -N K11H-1_TITV_NOVEL_$JOB_ID_SM_TAG \
 -hold_jid K11H_SELECT_SNVS_TITV_NOVEL_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11H-1_TITV_NOVEL.log' \
 $SCRIPT_DIR/K11H-1_TITV_NOVEL.sh \
 $SAMTOOLS_DIR \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG
}

# qsub -q rnd.q,test.q -pe slots 3 demo.sh 
# qsub -q rnd.q@c6100-18.cm.cluster  -pe slots 5 demo.sh 

SETUP_AND_RUN_ANNOVAR() {
echo \
 qsub \
 -N K11B-1_SETUP_AND_RUN_ANNOVER_$JOB_ID_SM_TAG \
 -hold_jid K11B_SELECT_SNVS_ON_BAIT_BY_SAMPLE_$JOB_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11B-1_SETUP_AND_RUN_ANNOVER.log' \
 -pe slots 5 $SCRIPT_DIR/K11B-1_SETUP_AND_RUN_ANNOVER.sh \
 $PROJECT_SAMPLE $SM_TAG $CIDR_SEQSUITE_4_0_JAVA $CIDR_SEQSUITE_DIR_4_0 \
 $CORE_PATH
}

HC_BED_GENERATION(){
echo \
 qsub \
 -N K11I_HC_BED_GENERATION_$SM_TAG \
 -hold_jid J10A_SELECT_VARIANTS_FOR_SAMPLE_$SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11I_HC_BED_GENERATION.log' \
 $SCRIPT_DIR/K11I_HC_BED_GENERATION.sh \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG
}


HC_BAM_GENERATION(){
echo \
 qsub \
 -N K11I-1_HC_BAM_GENERATION_$SM_TAG \
 -hold_jid K11I_HC_BED_GENERATION_$SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11I-1_HC_BAM_GENERATION.log' \
 $SCRIPT_DIR/K11I-1_HC_BAM_GENERATION.sh \
 $JAVA_1_7 $GATK_DIR $KEY $SAMPLE_REF_GENOME $DBSNP \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG
}

BGZIP_AND_TABIX_HC_VCF(){
echo \
 qsub \
 -N K11I-1-1_BGZIP_AND_TABIX_HC_VCF_$SM_TAG \
 -hold_jid K11I-1_HC_BAM_GENERATION_$SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_'$SM_TAG'_K11I-1-1_BGZIP_AND_TABIX_HC_VCF.log' \
 $SCRIPT_DIR/K11I-1-1_BGZIP_AND_TABIX_HC_VCF.sh \
 $TABIX_DIR \
 $CORE_PATH $PROJECT_SAMPLE $SM_TAG
}

GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS () 
{
	HAP_MAP_SAMPLE_LIST=(`echo $CORE_PATH'/'$PROJECT'/MULTI_SAMPLE/VARIANT_SUMMARY_STAT_VCF/'$PREFIX'_hap_map_samples.list'`)
	MENDEL_SAMPLE_LIST=(`echo $CORE_PATH'/'$PROJECT'/MULTI_SAMPLE/VARIANT_SUMMARY_STAT_VCF/'$PREFIX'_mendel_samples.list'`)
	echo \
	 qsub \
	 -N J10_GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS_$PROJECT \
 	 -hold_jid I09_COMBINE_VARIANTS_VCF_$PROJECT \
	 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_J10B_GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS.log' \
	 $SCRIPT_DIR/J10_GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS.sh \
	 $CORE_PATH $PROJECT $PREFIX
}


SELECT_SNVS_ALL () 
{
	echo \
	 qsub \
	 -N J10B_SELECT_SNPS_FOR_ALL_SAMPLES_$PROJECT \
	 -hold_jid J10_GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS_$PROJECT \
	 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_J10B_SELECT_SNPS_FOR_ALL_SAMPLES.log' \
	 $SCRIPT_DIR/J10B_SELECT_ALL_SAMPLES_SNP.sh \
	 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
	 $CORE_PATH $PROJECT $PREFIX
}

SELECT_PASS_MENDEL_ONLY_SNP () 
{
	echo \
	 qsub \
	 -N J10C_SELECT_PASS_MENDEL_ONLY_SNP_$PROJECT \
	 -hold_jid J10_GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS_$PROJECT \
	 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_J10C_SELECT_PASS_MENDEL_ONLY_SNP.log' \
	 $SCRIPT_DIR/J10C_SELECT_PASS_MENDEL_ONLY_SNP.sh \
	 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
	 $CORE_PATH $PROJECT $PREFIX $HAP_MAP_SAMPLE_LIST
}

SELECT_PASS_HAPMAP_ONLY_SNP ()
{
	echo \
	 qsub \
	 -N J10D_SELECT_PASS_HAPMAP_ONLY_SNP_$PROJECT \
	 -hold_jid J10_GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS_$PROJECT \
	 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_J10D_SELECT_PASS_HAPMAP_ONLY_SNP.log' \
	 $SCRIPT_DIR/J10D_SELECT_PASS_HAPMAP_ONLY_SNP.sh \
	 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
	 $CORE_PATH $PROJECT $PREFIX $MENDEL_SAMPLE_LIST
}

SELECT_INDELS_ALL ()
{
	echo \
	 qsub \
	 -N J10E_SELECT_INDELS_FOR_ALL_SAMPLES_$PROJECT \
	 -hold_jid J10_GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS_$PROJECT \
	 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_J10E_SELECT_INDELS_FOR_ALL_SAMPLES.log' \
	 $SCRIPT_DIR/J10E_SELECT_ALL_SAMPLES_INDELS.sh \
	 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
	 $CORE_PATH $PROJECT $PREFIX
}

SELECT_PASS_MENDEL_ONLY_INDELS ()
{
	echo \
	 qsub \
	 -N J10F_SELECT_PASS_MENDEL_ONLY_INDEL_$PROJECT \
	 -hold_jid J10_GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS_$PROJECT \
	 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_J10F_SELECT_PASS_MENDEL_ONLY_INDEL.log' \
	 $SCRIPT_DIR/J10F_SELECT_PASS_MENDEL_ONLY_INDEL.sh \
	 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
	 $CORE_PATH $PROJECT $PREFIX $HAP_MAP_SAMPLE_LIST
}

SELECT_PASS_HAPMAP_ONLY_INDELS ()
{
	echo \
	 qsub \
	 -N J10G_SELECT_PASS_HAPMAP_ONLY_INDEL_$PROJECT \
	 -hold_jid J10_GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS_$PROJECT \
	 -j y -o $CORE_PATH/$PROJECT/LOGS/$PREFIX'_J10G_SELECT_PASS_HAPMAP_ONLY_INDEL.log' \
	 $SCRIPT_DIR/J10G_SELECT_PASS_HAPMAP_ONLY_INDEL.sh \
	 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME \
	 $CORE_PATH $PROJECT $PREFIX $MENDEL_SAMPLE_LIST
}


##########################################################################
###################### End of Functions ##################################
##########################################################################

if [ -d $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT ]
then
	rm -rf $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT
fi
mkdir -p $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT

if [ -d $CORE_PATH/$PROJECT/TEMP/AGGREGATE ]
then
	rm -rf $CORE_PATH/$PROJECT/TEMP/AGGREGATE
fi
mkdir -p $CORE_PATH/$PROJECT/TEMP/AGGREGATE

CREATE_PROJECT_INFO_ARRAY
FORMAT_AND_SCATTER_BAIT_BED
CREATE_GVCF_LIST


for BED_FILE in $(ls $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/SPLITTED_BED_FILE*);
 do
BED_FILE_NAME=$(basename $BED_FILE .bed)
COMBINE_GVCF
GENOTYPE_GVCF
VARIANT_ANNOTATOR
GENERATE_COMBINE_VARIANTS_HOLD_ID
 done

# WRAP AROUND FOR COMBINE GVCF LIST TO KEEP 200 max
# for BED_FILE in $(ls $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/SPLITTED_BED_FILE*);
#  do
# BED_FILE_NAME=$(basename $BED_FILE .bed)
# for MINI_GVCF_LIST in $(ls $CORE_PATH/$PROJECT/TEMP/GVCF_LIST_SPLIT/SPLITTED_GVCF_LIST*)
# do
# COMBINE_GVCF_FOR_MINI_GVCF
# GENERATE_GENOTYPE_GVCF_HOLDID
# done
# GENOTYPE_GVCF
# VARIANT_ANNOTATOR
# GENERATE_COMBINE_VARIANTS_HOLD_ID
#  done

COMBINE_VARIANTS
VARIANT_RECALIBRATOR_SNV
VARIANT_RECALIBRATOR_INDEL
APPLY_RECALIBRATION_SNV
APPLY_RECALIBRATION_INDEL
SELECT_RARE_BIALLELIC
ANNOTATE_SELECT_RARE_BIALLELIC
SELECT_COMMON_BIALLELIC
SELECT_MULTIALLELIC
COMBINE_VARIANTS_VCF
BGZIP_AND_TABIX_COMBINED_VCF

for SAMPLE in $(awk 'BEGIN {FS=","} NR>1 {print $8}' $SAMPLE_SHEET | sort | uniq )
do
CREATE_SAMPLE_INFO_ARRAY
SELECT_PASSING_VARIANTS_PER_SAMPLE
BGZIP_AND_TABIX_SAMPLE_VCF
SELECT_VARIANTS_ON_TARGET_BY_SAMPLE
SELECT_SNVS_ON_BAIT_BY_SAMPLE
SELECT_SNVS_ON_TARGET_BY_SAMPLE
SELECT_INDELS_ON_BAIT_BY_SAMPLE
SELECT_INDELS_ON_TARGET_BY_SAMPLE
SELECT_SNVS_TITV_ALL
TITV_ALL
SELECT_SNVS_TITV_KNOWN
TITV_KNOWN
SELECT_SNVS_TITV_NOVEL
TITV_NOVEL
HC_BED_GENERATION
HC_BAM_GENERATION
BGZIP_AND_TABIX_HC_VCF
CONCORDANCE_ON_TARGET_PER_SAMPLE
SETUP_AND_RUN_ANNOVAR
done

GENERATE_MENDEL_HAPMAP_SAMPLE_LISTS
SELECT_SNVS_ALL
SELECT_PASS_MENDEL_ONLY_SNP EXCLUDE HAP_MAP_SAMPLES
SELECT_PASS_HAPMAP_ONLY_SNP INCLUDE ONLY HAP_MAP_SAMPLES
SELECT_INDELS_ALL
SELECT_PASS_MENDEL_ONLY_INDELS EXCLUDE HAP_MAP_SAMPLES
SELECT_PASS_HAPMAP_ONLY_INDELS INCLUDE ONLY HAP_MAP_SAMPLES
